### 解题思路

使用pre记录上一个已坐座位的位置，初始值为-1，maxdis记录两个已坐位置之间的最大间距，遍历数组seat
（1）第一次出现已坐座位时，因为目前只有一个已坐座位，所以最大间距可能出现在该位置之前，即第一个位置，此时最大长度为i，为统一返回值，将距离记录为2 * i。示例：[0,0,0,0,1,0,1]，结果为4
（2）两个已坐位置间距离大于1时，即中间有空座，两者距离为偶数（中间空座位为奇数）时可以坐在两者中间位置，奇数时坐在偏左位置。示例：[1,0,0,0,1,0,1]，结果为2
（3）最后一个位置为未坐座位时，此时坐在最后一个位置也可能出现最大值，距离为i - pre，为统一返回值，将距离记录为2 * (i - pre)。示例：[0,1,0,1,0,0,0]，结果为3
（4）最后结果为maxdis - maxdis / 2

**时间复杂度O（N）
空间复杂度O（1）**

### 代码

* cpp

```cpp
class Solution {
public:
    int maxDistToClosest(vector<int>& seats) {
        int pre = -1;   //上一个已坐位置，初始值为-1
        int maxdis = 0; //两个已坐位置间的最大长度
        int n = seats.size();
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {    //已坐座位
                //第一个已坐座位
                if (pre == -1) {
                    maxdis = i * 2;
                }
                else if (i - pre > 1) {
                    maxdis = max(maxdis, i - pre - 1);
                }
                pre = i;    //更新pre
            }
            
            //非已坐座位且是最后一个座位
            else if (i == n - 1) {
                maxdis = max(maxdis, 2 * (i - pre));
            }
        }
        return maxdis - maxdis / 2; //离他最近的人的最大距离为maxdis - maxdis / 2
    }
};
```

